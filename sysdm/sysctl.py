import os
import sys
from sysdm.utils import get_output, run_quiet, is_unit_running, is_unit_enabled


def get_cmd_from_filename(fname):
    cmd = None
    binary = False
    if fname.endswith(".py"):
        cmd = (get_output("which python3") or get_output("which python")) + " -u"
    elif fname.endswith(".sh"):
        cmd = get_output("which bash")
    elif fname.endswith(".js"):
        cmd = get_output("which node")
    else:
        if "." in fname.split("/")[-1]:
            tmpl = "WARNING: File extension of file '{}' not supported. Treating as executable."
            print(tmpl.format(fname))
        if os.path.isfile(fname):
            cmd = os.path.abspath(fname)
        else:
            cmd = get_output("which " + fname)
            if not cmd:
                print("Do not understand how to run '{}'".format(fname))
                sys.exit(1)
        binary = True
    return binary, cmd.strip()


def get_extensions_from_filename(fname):
    cmd = []
    if "." in fname.split("/")[-1]:
        cmd = ["." + fname.split(".")[-1]]
    elif os.path.isfile(fname):
        cmd = [fname]
    return cmd


def get_exclusions_from_filename(fname):
    cmd = []
    if fname.endswith(".py"):
        cmd = ["flycheck_", "$", ".vim", "'#'"]
    elif fname.endswith(".sh"):
        cmd = []
    elif fname.endswith(".js"):
        cmd = ["flycheck_", "$", ".vim", "'#'"]
    return cmd


def create_service_template(args):
    here = os.path.abspath(".")
    user = get_output("echo $SUDO_USER")
    user_group = get_output("""getent group | grep $SUDO_GID: | awk -F ":" '{ print $1}'""").split(
        "\n"
    )[0]
    extra_args = " ".join(args.extra_args)
    binary, cmd = get_cmd_from_filename(args.fname)
    fname = args.fname + " "
    # other binary
    if binary:
        fname = ""
    service_name = args.fname + "_" + here.split("/")[-1] if binary else args.fname
    service_name = service_name.replace("./", "").replace(".", "_")
    service = (
        """
    [Unit]
    Description={service_name} service (generated by sysdm)
    After=network-online.target
    PartOf={service_name}_monitor.service
    OnFailure=mail-onfailure@%i.service

    [Service]
    User={user}
    Group={user_group}
    Type=simple
    Restart=always
    RestartSec=0.2
    ExecStart={cmd} {fname} {extra_args}
    WorkingDirectory={here}

    [Install]
    WantedBy=multi-user.target
    """.replace(
            "\n    ", "\n"
        )
        .format(
            service_name=service_name,
            user=user,
            user_group=user_group,
            cmd=cmd,
            fname=fname,
            extra_args=extra_args,
            here=here,
        )
        .strip()
    )
    return service_name, service


def create_service_monitor_template(service_name, args):
    user = get_output("echo $SUDO_USER")
    user_group = get_output("""getent group | grep $SUDO_GID: | awk -F ":" '{ print $1}'""").split(
        "\n"
    )[0]
    cmd = get_output("which sysdm")
    here = os.path.abspath(".")
    extensions = args.extensions or get_extensions_from_filename(args.fname)
    extensions = " ".join(extensions)
    exclude_patterns = args.exclude_patterns or get_exclusions_from_filename(args.fname)
    exclude_patterns = " ".join(exclude_patterns)
    exclude_patterns = "--exclude_patterns " + exclude_patterns if exclude_patterns else ""
    service = (
        """
    [Unit]
    Description={service_name}.monitor service (generated by sysdm)
    After=network-online.target

    [Service]
    User={user}
    Group={user_group}
    Type=simple
    Restart=always
    RestartSec=0
    Environment="PYTHONUNBUFFERED=on"
    ExecStart={cmd} watch {extensions} {exclude_patterns}
    WorkingDirectory={here}

    [Install]
    WantedBy=multi-user.target
    """.replace(
            "\n    ", "\n"
        )
        .format(
            service_name=service_name,
            user=user,
            user_group=user_group,
            cmd=cmd,
            extensions=extensions,
            exclude_patterns=exclude_patterns,
            here=here,
        )
        .strip()
    )
    return service


def create_mail_on_failure_service(args):
    mailer = get_output("which yagmail")
    user = get_output("echo $SUDO_USER")
    home = get_output("echo ~" + user)
    service = """
    [Unit]
    Description=Mail OnFailure for %i

    [Service]
    Type=oneshot
    ExecStart=/usr/bin/sh -c \
              'systemctl status -l -n 1000 %i | \
              {mailer} -s "%i failed on %H" -oauth2 {home}/oauth2.json'
    """.replace(
        "\n    ", "\n"
    ).format(
        mailer=mailer, home=home
    )
    with open(os.path.join(args.systempath, "mail-onfailure@.service"), "w") as f:
        f.write(service)


#


def install(args):
    service_name, service = create_service_template(args)
    try:
        with open(os.path.join(args.systempath, service_name) + ".service", "w") as f:
            f.write(service)
    except PermissionError:
        print("Need sudo to create systemd unit service file.")
        sys.exit(1)
    monitor = create_service_monitor_template(service_name, args)
    with open(os.path.join(args.systempath, service_name) + "_monitor.service", "w") as f:
        f.write(monitor)
    create_mail_on_failure_service(args)
    _ = get_output("systemctl daemon-reload")
    _ = get_output("systemctl enable {}".format(service_name))
    _ = get_output("systemctl start {}".format(service_name))
    _ = get_output("systemctl enable {}_monitor".format(service_name))
    _ = get_output("systemctl start {}_monitor".format(service_name))
    return service_name


def show(args):
    service_name = args.fname.replace(".", "_")
    service_file = os.path.join(args.systempath, service_name) + ".service"
    service_monitor_file = os.path.join(args.systempath, service_name) + "_monitor.service"
    print("--- CONTENTS FOR {} ---".format(service_file))
    with open(service_file, "r") as f:
        print(f.read())
    print("\n--- CONTENTS FOR {} ---".format(service_monitor_file))
    with open(service_monitor_file, "r") as f:
        print(f.read())


def ls(args):
    units = []
    for fname in os.listdir(args.systempath):
        if "_monitor.s" in fname:
            continue
        fpath = args.systempath + "/" + fname
        if os.path.isdir(fpath):
            continue
        with open(fpath) as f:
            if "generated by " in f.read():
                units.append(fname.replace(".service", ""))
    return units


def delete(fname, systempath):
    service_name = fname.replace(".", "_")
    path = systempath + "/" + service_name
    for s in [service_name, service_name + "_monitor"]:
        print(s)
        import pdb

        pdb.set_trace()
        if is_unit_enabled(s):
            _ = get_output("systemctl disable {}".format(s))
            print("Disabled unit {}".format(s))
        else:
            print("Unit {} was not enabled so no need to disable it".format(s))
        if is_unit_running(s):
            _ = get_output("systemctl stop {}".format(s))
            print("Stopped unit {}".format(s))
        else:
            print("Unit {} was not started so no need to stop it".format(s))
    _ = get_output("systemctl daemon-reload")
    o = run_quiet("rm {}".format(path + ".service"))
    o = run_quiet("rm {}".format(path + "_monitor.service"))
    print("Deleted {}".format(path + ".service"))
    print("Deleted {}".format(path + "_monitor.service"))
    print("Delete Succeeded!")
